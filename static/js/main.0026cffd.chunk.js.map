{"version":3,"sources":["components/Nav.js","components/Employee.js","App.js","serviceWorker.js","index.js"],"names":["myNav","props","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","as","value","onClick","handleSort","Form","onSubmit","handleFormSubmit","inline","FormControl","type","placeholder","onChange","handleInputChange","Button","variant","Employee","src","image","alt","name","phone","mailTo","target","rel","email","stateName","App","state","employees","pending","search","sortBy","searchEmployees","axios","get","then","res","setState","data","results","event","preventDefault","searchSorter","filterArray","length","filter","employee","first","toLowerCase","includes","last","sort","a","b","location","this","Table","striped","bordered","hover","map","key","picture","large","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sVA2DeA,EApDD,SAACC,GACb,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,sBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QAEA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,UAAUL,GAAG,sBAC9B,kBAACI,EAAA,EAAYE,KAAb,CACEC,GAAG,SACHC,MAAM,YACNC,QAASlB,EAAMmB,YAHjB,cAOA,kBAACN,EAAA,EAAYE,KAAb,CACEC,GAAG,SACHC,MAAM,WACNC,QAASlB,EAAMmB,YAHjB,aAOA,kBAACN,EAAA,EAAYE,KAAb,CACEC,GAAG,SACHC,MAAM,YACNC,QAASlB,EAAMmB,YAHjB,WAUJ,kBAACC,EAAA,EAAD,CAAMC,SAAUrB,EAAMsB,iBAAkBC,QAAM,GAC5C,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZf,UAAU,UACVgB,SAAU3B,EAAM4B,kBAEhBX,MAAOjB,EAAMiB,QAEf,kBAACY,EAAA,EAAD,CAAQC,QAAQ,kBAAkBZ,QAASlB,EAAMsB,kBAAjD,e,sBCvBGS,MA1Bf,SAAkB/B,GAEd,OACI,4BACI,4BACI,yBACIgC,IAAKhC,EAAMiC,MACXC,IAAKlC,EAAMmC,QAGnB,4BAAKnC,EAAMmC,MACX,4BAAKnC,EAAMoC,OACX,4BACI,uBACI/B,KAAML,EAAMqC,OACZC,OAAO,SACPC,IAAI,uBAEPvC,EAAMwC,QAGX,4BAAKxC,EAAMyC,aCuFRC,E,4MAtGbC,MAAQ,CACNC,UAAW,GACXC,QAAS,GACTC,OAAQ,GACRC,OAAQ,a,EAOVC,gBAAkB,WAChBC,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9D,EAAKC,SAAS,CAAET,UAAWQ,EAAIE,KAAKC,c,EAIxC3B,kBAAoB,SAAC4B,GACnB,EAAKH,SAAS,CACZR,QAASW,EAAMlB,OAAOrB,S,EAI1BK,iBAAmB,SAACkC,GAClBA,EAAMC,iBACN,EAAKJ,SAAS,CAAEP,OAAQ,EAAKH,MAAME,W,EAGrC1B,WAAa,SAACqC,GACZA,EAAMC,iBACN,EAAKJ,SAAS,CACZN,OAAQS,EAAMlB,OAAOrB,S,EAIzByC,aAAe,WACb,IAAIC,EAAc,GAClB,OAAI,EAAKhB,MAAMC,UAAUgB,OAAS,IAChCD,EAAc,EAAKhB,MAAMC,UAAUiB,QAAO,SAACC,GACzC,OACEA,EAAS3B,KAAK4B,MAAMC,cAAcC,SAAS,EAAKtB,MAAMG,SACtDgB,EAAS3B,KAAK+B,KAAKF,cAAcC,SAAS,EAAKtB,MAAMG,SACrDgB,EAAS1B,MAAM4B,cAAcC,SAAS,EAAKtB,MAAMG,SACjDgB,EAAStB,MAAMwB,cAAcC,SAAS,EAAKtB,MAAMG,YAIzCqB,MAAK,SAACC,EAAGC,GACnB,OAAQ,EAAK1B,MAAMI,QACjB,IAAK,YACH,OAAOqB,EAAEjC,KAAK4B,MAAQM,EAAElC,KAAK4B,MAAQ,GAAK,EAC5C,IAAK,WACH,OAAOK,EAAEjC,KAAK+B,KAAOG,EAAElC,KAAK+B,KAAO,GAAK,EAC1C,IAAK,YACH,OAAOE,EAAEE,SAAS3B,MAAQ0B,EAAEC,SAAS3B,MAAQ,GAAK,EACpD,QACE,MAAO,OAGNgB,GACK,I,kEApDdY,KAAKvB,oB,+BAwDL,OACE,yBAAKrC,UAAU,aACb,kBAAC,EAAD,CACEM,MAAOsD,KAAK5B,MAAME,QAClB1B,WAAYoD,KAAKpD,WACjBS,kBAAmB2C,KAAK3C,kBACxBN,iBAAkBiD,KAAKjD,mBAGzB,kBAACkD,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,6BACA,oCACA,qCACA,qCACA,8CAGJ,+BACGJ,KAAKb,eAAekB,KAAI,SAACd,GAAD,OACvB,kBAAC,EAAD,CACEe,IAAKf,EAASrD,GAAGQ,MACjBgB,MAAO6B,EAASgB,QAAQC,MACxB5C,KAAM2B,EAAS3B,KAAK4B,MAAQ,IAAMD,EAAS3B,KAAK+B,KAChD9B,MAAO0B,EAAS1B,MAChBI,MAAOsB,EAAStB,MAChBC,UAAWqB,EAASQ,SAAS3B,MAC7BN,OAAQ,UAAYyB,EAAStB,kB,GA7F3BwC,IAAMC,WCKJC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0026cffd.chunk.js","sourcesContent":["import React from \"react\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { Nav, Navbar} from \"react-bootstrap\";\n\nconst myNav = (props) => {\n  return (\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Employee Directory</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n\n            <NavDropdown title=\"Sort By\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item\n                as=\"button\"\n                value=\"firstName\"\n                onClick={props.handleSort}\n              >\n                First Name\n              </NavDropdown.Item>\n              <NavDropdown.Item\n                as=\"button\"\n                value=\"lastName\"\n                onClick={props.handleSort}\n              >\n                Last Name\n              </NavDropdown.Item>\n              <NavDropdown.Item\n                as=\"button\"\n                value=\"stateName\"\n                onClick={props.handleSort}\n              >\n                State\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n\n          <Form onSubmit={props.handleFormSubmit} inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Search\"\n              className=\"mr-sm-2\"\n              onChange={props.handleInputChange}\n              \n              value={props.value}\n            />\n            <Button variant=\"outline-success\" onClick={props.handleFormSubmit}>Search</Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default myNav;\n","import React from 'react';\n\nfunction Employee(props) {\n\n    return (\n        <tr>\n            <td>\n                <img \n                    src={props.image} \n                    alt={props.name}\n                />\n            </td>\n            <td>{props.name}</td>\n            <td>{props.phone}</td>\n            <td>\n                <a \n                    href={props.mailTo}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                {props.email}\n                </a>\n            </td>\n            <td>{props.stateName}</td>\n        </tr>\n    );\n}\n\nexport default Employee;","import React from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./components/Nav\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Table from \"react-bootstrap/Table\";\nimport Employee from \"./components/Employee\";\nclass App extends React.Component {\n  state = {\n    employees: {},\n    pending: \"\",\n    search: \"\",\n    sortBy: \"firstName\",\n  };\n\n  componentDidMount() {\n    this.searchEmployees();\n  }\n\n  searchEmployees = () => {\n    axios.get(\"https://randomuser.me/api/?results=10&nat=au\").then((res) => {\n      this.setState({ employees: res.data.results });\n    });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({\n      pending: event.target.value,\n    });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.setState({ search: this.state.pending });\n  };\n\n  handleSort = (event) => {\n    event.preventDefault();\n    this.setState({\n      sortBy: event.target.value,\n    });\n  };\n\n  searchSorter = () => {\n    let filterArray = [];\n    if (this.state.employees.length > 0) {\n      filterArray = this.state.employees.filter((employee) => {\n        return (\n          employee.name.first.toLowerCase().includes(this.state.search) ||\n          employee.name.last.toLowerCase().includes(this.state.search) ||\n          employee.phone.toLowerCase().includes(this.state.search) ||\n          employee.email.toLowerCase().includes(this.state.search)\n        );\n      });\n\n      filterArray.sort((a, b) => {\n        switch (this.state.sortBy) {\n          case \"firstName\":\n            return a.name.first > b.name.first ? 1 : -1;\n          case \"lastName\":\n            return a.name.last > b.name.last ? 1 : -1;\n          case \"stateName\":\n            return a.location.state > b.location.state ? 1 : -1;\n          default:\n            return [];\n        }\n      });\n      return filterArray;\n    } else return [];\n  };\n\n  render() {\n    return (\n      <div className=\"employees\">\n        <Navbar\n          value={this.state.pending}\n          handleSort={this.handleSort}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th></th>\n              <th>Name</th>\n              <th>Phone</th>\n              <th>Email</th>\n              <th>Branch State</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.searchSorter().map((employee) => (\n              <Employee\n                key={employee.id.value}\n                image={employee.picture.large}\n                name={employee.name.first + \" \" + employee.name.last}\n                phone={employee.phone}\n                email={employee.email}\n                stateName={employee.location.state}\n                mailTo={\"mailto:\" + employee.email}\n              />\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}